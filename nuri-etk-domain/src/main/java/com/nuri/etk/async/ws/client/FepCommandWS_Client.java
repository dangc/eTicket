
package com.nuri.etk.async.ws.client;


import java.io.File;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;

import javax.xml.namespace.QName;

import com.nuri.etk.async.util.CmdProperty;
import com.nuri.etk.async.util.ETKProperty;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.apache.cxf.endpoint.Client;
import org.apache.cxf.frontend.ClientProxy;
import org.apache.cxf.transport.http.HTTPConduit;
import org.apache.cxf.transports.http.configuration.ConnectionType;
import org.apache.cxf.transports.http.configuration.HTTPClientPolicy;
import com.nuri.etk.entity.aimir.CommonConstants.TargetClass;
import com.nuri.etk.entity.aimir.CommonConstants.Protocol;

/**
 * This class was generated by Apache CXF 2.7.0
 * 2018-11-23T16:56:46.234+09:00
 * Generated source version: 2.7.0
 * 
 */
public final class FepCommandWS_Client {

    private static Log log = LogFactory.getLog(FepCommandWS_Client.class);
    private static final QName SERVICE_NAME = new QName("http://server.ws.command.fep.aimir.com/", "CommandWS");
    
    private FepCommandWS_Client() {
    }

    public static FepCommandWS getCommandWS(TargetClass targetClass, String timeout) throws IOException {
        FepCommandWS port = null;
        try {
            FepCommandWS_Service ss = new FepCommandWS_Service(getURL(targetClass));
            port = ss.getCommandWSPort();
        }
        catch(java.lang.Exception e){
            log.error("################ " + e.getMessage(), e);
        }
        finally {
            if (port != null) {
                Client client = ClientProxy.getClient(port);
                HTTPConduit http = (HTTPConduit)client.getConduit();
                HTTPClientPolicy httpClientPolicy = new HTTPClientPolicy();

                if(timeout == null || "".equals(timeout)){
                    timeout = "180000";
                    if(CmdProperty.getProperty("fep.ws.timeout")!=null)
                        timeout = (String)CmdProperty.getProperty("fep.ws.timeout");
                }
                log.info("FepCommandWS Timeout Set : " + timeout + " ms");
                httpClientPolicy.setReceiveTimeout(Long.parseLong(timeout));
                httpClientPolicy.setAllowChunking(false);
                httpClientPolicy.setConnection(ConnectionType.CLOSE);
                http.setClient(httpClientPolicy);
            }
        }

        return port;
    }
    
    public static FepCommandWS getCommandWS(String protocolName) throws IOException {
        return getCommandWS(Protocol.valueOf(protocolName));
    }
    
    public static FepCommandWS getCommandWS(Protocol protocol) throws IOException {
    	FepCommandWS port = null;
        try {
        	log.info("protocol ["+protocol+"], url ["+getURL(protocol)+"]");
        	FepCommandWS_Service ss = new FepCommandWS_Service(getURL(protocol));
            port = ss.getCommandWSPort();
        }
        catch(java.lang.Exception e){
        	log.error("################ " + e.getMessage(), e);
        }
        finally {
            if (port != null) {
                Client client = ClientProxy.getClient(port);
                HTTPConduit http = (HTTPConduit)client.getConduit();
                HTTPClientPolicy httpClientPolicy = new HTTPClientPolicy();
                if(ETKProperty.getProperty("fep.ws.timeout")!=null && !ETKProperty.getProperty("fep.ws.timeout").equals("")) {
                    httpClientPolicy.setReceiveTimeout(Long.parseLong((String)ETKProperty.getProperty("fep.ws.timeout")));
                    log.info("CommandWS Timeout Set : " + (String)ETKProperty.getProperty("fep.ws.timeout") + " ms");
                } else {
                    httpClientPolicy.setReceiveTimeout(180000);
                    log.info("CommandWS Timeout Set : 180000 ms");
                }
                httpClientPolicy.setAllowChunking(false);
                httpClientPolicy.setConnection(ConnectionType.CLOSE);
                http.setClient(httpClientPolicy);
            }
        }
        
        return port;
    }
    
    private static URL getURL(TargetClass targetClass) throws MalformedURLException {
        String url = null;
        if (targetClass != null)
            url = (String) CmdProperty.getProperty("fep.ws." +targetClass.name());

        if (url == null || "".equals(url)){
            url = (String)CmdProperty.getProperty("fep.ws");
        }

        return new URL(url);
    }

    private static URL getURL(Protocol protocol) throws MalformedURLException {
        String url = null;
        if (protocol != null)
            url = (String)CmdProperty.getProperty("fep.ws." +protocol.name());
        
        if (url == null || "".equals(url))
            url = (String)CmdProperty.getProperty("fep.ws");
        
        return new URL(url);
    }
    
    //test
    public static void main(String args[]) throws java.lang.Exception {
        URL wsdlURL = FepCommandWS_Service.WSDL_LOCATION;
        if (args.length > 0 && args[0] != null && !"".equals(args[0])) {
            File wsdlFile = new File(args[0]);
            try {
                if (wsdlFile.exists()) {
                    wsdlURL = wsdlFile.toURI().toURL();
                } else {
                    wsdlURL = new URL(args[0]);
                }
            } catch (MalformedURLException e) {
                e.printStackTrace();
            }
        }

        FepCommandWS_Service ss = new FepCommandWS_Service(wsdlURL, SERVICE_NAME);
        FepCommandWS port = ss.getCommandWSPort();

        {
            System.out.println("Invoking cmdSTSGeneralCommand...");
            String _cmdSTSGeneralCommand_modemId = "000B12000000026E";
            String _cmdSTSGeneralCommand_meterId = "24180502593";
            String _cmdSTSGeneralCommand_requestType = "GET";
            String _cmdSTSGeneralCommand_param = "1.65.1.140.1.255|3|2|RW|octet-string";
            try {
                com.nuri.etk.async.ws.client.ResponseMap _cmdSTSGeneralCommand__return = port.cmdSTSGeneralCommand(_cmdSTSGeneralCommand_modemId, _cmdSTSGeneralCommand_meterId, _cmdSTSGeneralCommand_requestType, _cmdSTSGeneralCommand_param);
                System.out.println("cmdSTSGeneralCommand.result=" + _cmdSTSGeneralCommand__return);

            } catch (Exception_Exception e) {
                System.out.println("Expected exception: Exception has occurred.");
                System.out.println(e.toString());
            }
        }

        /*{
        System.out.println("Invoking cmdSTSBlockTariff...");
        java.lang.String _cmdSTSBlockTariff_modemId = "";
        java.lang.String _cmdSTSBlockTariff_meterId = "";
        java.lang.String _cmdSTSBlockTariff_requestType = "";
        java.lang.String _cmdSTSBlockTariff_param = "";
        java.lang.String _cmdSTSBlockTariff_groupCrc = "";
        try {
            com.aimir.etk.ws.client.ResponseMap _cmdSTSBlockTariff__return = port.cmdSTSBlockTariff(_cmdSTSBlockTariff_modemId, _cmdSTSBlockTariff_meterId, _cmdSTSBlockTariff_requestType, _cmdSTSBlockTariff_param, _cmdSTSBlockTariff_groupCrc);
            System.out.println("cmdSTSBlockTariff.result=" + _cmdSTSBlockTariff__return);

        } catch (Exception_Exception e) {
            System.out.println("Expected exception: Exception has occurred.");
            System.out.println(e.toString());
        }
            }*/
        {
            System.out.println("Invoking icmpPing...");
            java.util.List<String> _icmpPing_commands = null;
            try {
                String _icmpPing__return = port.icmpPing(_icmpPing_commands);
                System.out.println("icmpPing.result=" + _icmpPing__return);

            } catch (Exception_Exception e) {
                System.out.println("Expected exception: Exception has occurred.");
                System.out.println(e.toString());
            }
        }
        /*{
        System.out.println("Invoking relayValveOn...");
        java.lang.String _relayValveOn_mcuId = "";
        java.lang.String _relayValveOn_meterId = "";
        try {
            com.aimir.etk.ws.client.ResponseMap _relayValveOn__return = port.relayValveOn(_relayValveOn_mcuId, _relayValveOn_meterId);
            System.out.println("relayValveOn.result=" + _relayValveOn__return);

        } catch (Exception_Exception e) {
            System.out.println("Expected exception: Exception has occurred.");
            System.out.println(e.toString());
        }
            }*/
        {
            System.out.println("Invoking traceroute...");
            java.util.List<String> _traceroute_commands = null;
            try {
                String _traceroute__return = port.traceroute(_traceroute_commands);
                System.out.println("traceroute.result=" + _traceroute__return);

            } catch (Exception_Exception e) {
                System.out.println("Expected exception: Exception has occurred.");
                System.out.println(e.toString());
            }
        }
        /*{
        System.out.println("Invoking cmdSTSNetCharge...");
        java.lang.String _cmdSTSNetCharge_modemId = "";
        java.lang.String _cmdSTSNetCharge_meterId = "";
        java.lang.String _cmdSTSNetCharge_param = "";
        try {
            com.aimir.etk.ws.client.ResponseMap _cmdSTSNetCharge__return = port.cmdSTSNetCharge(_cmdSTSNetCharge_modemId, _cmdSTSNetCharge_meterId, _cmdSTSNetCharge_param);
            System.out.println("cmdSTSNetCharge.result=" + _cmdSTSNetCharge__return);

        } catch (Exception_Exception e) {
            System.out.println("Expected exception: Exception has occurred.");
            System.out.println(e.toString());
        }
            }*/
        {
            System.out.println("Invoking cmdTCPTrigger...");
            String _cmdTCPTrigger_cmd = "test";
            String _cmdTCPTrigger_ipAddr = "172.16.30.147";
            try {
                boolean _cmdTCPTrigger__return = port.cmdTCPTrigger(_cmdTCPTrigger_cmd, _cmdTCPTrigger_ipAddr);
                System.out.println("cmdTCPTrigger.result=" + _cmdTCPTrigger__return);

            } catch (Exception_Exception e) {
                System.out.println("Expected exception: Exception has occurred.");
                System.out.println(e.toString());
            }
        }

        System.exit(0);
    }

}
